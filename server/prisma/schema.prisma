// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  productId Int @id @default(autoincrement()) @map("product_id")
  productName String @db.VarChar(255) @map("product_name")
  brand String @db.VarChar(255)
  ingredients String @db.VarChar(2500)
  img String @db.VarChar(2000)
  imgSmall String @db.VarChar(2000) @map("img_small")
  origin String? @db.VarChar(500)

  @@map("product")
}

model Cart{
  cartId Int @id @default(autoincrement()) @map("cart_id")
  userId Int @map("user_id")
  productId Int @map("product_id")
  quantity Int @default(1)

  @@map("cart")
}

model Category {
  productId Int @id @default(autoincrement()) @map("product_id")
  level0 String @db.VarChar(100) @map("level_0")

  @@map("category")
}

model Nutrient {
  productId Int @id @default(autoincrement()) @map("product_id")
  packSize String? @db.VarChar(50) @map("pack_size")
  servingSize String? @db.VarChar(50) @map("serving_size")
  energy Float? 
  calories Float? 
  fat Float? 
  saturates Float? 
  sugars Float? 
  salt Float?

  @@map("nutrient") 
}

model Record {
  recordId Int @id @default(autoincrement()) @map("record_id")
  userId Int? @map("user_id")
  typeOfChart String? @db.VarChar(45)
  date DateTime?

  @@map("record")
}

model User {
  userId   Int       @id @default(autoincrement()) @map("user_id")
  username String? @db.VarChar(100)
  email    String    @unique @db.VarChar(100)
  password String? @db.VarChar(100)
  googleId String? @unique @map("google_id")

  @@map("user")
}

// model Account {
//   id                Int    @id @default(autoincrement())
//   userId            Int    @map("user_id")
//   type              String
//   provider          String
//   providerAccountId String @map("provider_account_id")
//   refresh_token     String? @db.Text
//   access_token      String? @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.Text
//   session_state     String?

//   user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }
